// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Persistence;

#nullable disable

namespace Persistence.Data.Migrations
{
    [DbContext(typeof(ApiContext))]
    partial class ApiContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.12")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            modelBuilder.Entity("Domain.Entities.Cliente", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int")
                        .HasColumnName("Id_cliente");

                    b.Property<string>("ApellidoContacto")
                        .HasMaxLength(30)
                        .HasColumnType("varchar(30)")
                        .HasColumnName("apellido_contacto");

                    b.Property<string>("Ciudad")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("ciudad");

                    b.Property<string>("CodigoPostal")
                        .HasMaxLength(10)
                        .HasColumnType("varchar(10)")
                        .HasColumnName("Id_postal");

                    b.Property<string>("Fax")
                        .HasMaxLength(15)
                        .HasColumnType("varchar(15)")
                        .HasColumnName("fax");

                    b.Property<int>("IdEmpleadoRepVentas")
                        .HasColumnType("int")
                        .HasColumnName("Id_empleado_rep_ventas");

                    b.Property<decimal>("LimiteCredito")
                        .HasPrecision(15, 2)
                        .HasColumnType("decimal(15,2)")
                        .HasColumnName("limite_credito");

                    b.Property<string>("LineaDireccion1")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("linea_direccion1");

                    b.Property<string>("LineaDireccion2")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("linea_direccion2");

                    b.Property<string>("NombreCliente")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("nombre_cliente");

                    b.Property<string>("NombreContacto")
                        .HasMaxLength(30)
                        .HasColumnType("varchar(30)")
                        .HasColumnName("nombre_contacto");

                    b.Property<string>("Pais")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("pais");

                    b.Property<string>("Region")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("region");

                    b.Property<string>("Telefono")
                        .HasMaxLength(15)
                        .HasColumnType("varchar(15)")
                        .HasColumnName("telefono");

                    b.HasKey("Id")
                        .HasName("PRIMARY");

                    b.HasIndex(new[] { "IdEmpleadoRepVentas" }, "Id_empleado_rep_ventas");

                    b.ToTable("cliente", (string)null);
                });

            modelBuilder.Entity("Domain.Entities.DetallePedido", b =>
                {
                    b.Property<int>("IdPedido")
                        .HasColumnType("int")
                        .HasColumnName("Id_pedido");

                    b.Property<string>("IdProducto")
                        .HasMaxLength(15)
                        .HasColumnType("varchar(15)")
                        .HasColumnName("Id_producto");

                    b.Property<int>("Cantidad")
                        .HasColumnType("int")
                        .HasColumnName("cantidad");

                    b.Property<short>("NumeroLinea")
                        .HasColumnType("smallint")
                        .HasColumnName("numero_linea");

                    b.Property<decimal>("PrecioUnidad")
                        .HasPrecision(15, 2)
                        .HasColumnType("decimal(15,2)")
                        .HasColumnName("precio_unidad");

                    b.HasKey("IdPedido", "IdProducto")
                        .HasName("PRIMARY")
                        .HasAnnotation("MySql:IndexPrefixLength", new[] { 0, 0 });

                    b.HasIndex(new[] { "IdProducto" }, "Id_producto");

                    b.ToTable("detalle_pedido", (string)null);
                });

            modelBuilder.Entity("Domain.Entities.Empleado", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int")
                        .HasColumnName("Id_empleado");

                    b.Property<string>("Apellido1")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("apellido1");

                    b.Property<string>("Apellido2")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("apellido2");

                    b.Property<string>("Email")
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("email");

                    b.Property<string>("Extension")
                        .HasMaxLength(10)
                        .HasColumnType("varchar(10)")
                        .HasColumnName("extension");

                    b.Property<int>("IdJefe")
                        .HasColumnType("int")
                        .HasColumnName("Id_jefe");

                    b.Property<string>("IdOficina")
                        .HasMaxLength(10)
                        .HasColumnType("varchar(10)")
                        .HasColumnName("Id_oficina");

                    b.Property<string>("Nombre")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("nombre");

                    b.Property<string>("Puesto")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("puesto");

                    b.HasKey("Id")
                        .HasName("PRIMARY");

                    b.HasIndex(new[] { "IdJefe" }, "Id_jefe");

                    b.HasIndex(new[] { "IdOficina" }, "Id_oficina");

                    b.ToTable("empleado", (string)null);
                });

            modelBuilder.Entity("Domain.Entities.GamaProducto", b =>
                {
                    b.Property<string>("Gama")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("gama");

                    b.Property<string>("DescriptionHtml")
                        .HasColumnType("text")
                        .HasColumnName("description_html");

                    b.Property<string>("DescriptionTexto")
                        .HasColumnType("text")
                        .HasColumnName("description_texto");

                    b.Property<string>("Id")
                        .HasColumnType("longtext");

                    b.Property<string>("Imagen")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)")
                        .HasColumnName("imagen");

                    b.HasKey("Gama")
                        .HasName("PRIMARY");

                    b.ToTable("gama_producto", (string)null);
                });

            modelBuilder.Entity("Domain.Entities.Oficina", b =>
                {
                    b.Property<string>("IdOficina")
                        .HasMaxLength(10)
                        .HasColumnType("varchar(10)")
                        .HasColumnName("Id_oficina");

                    b.Property<string>("Ciudad")
                        .HasMaxLength(30)
                        .HasColumnType("varchar(30)")
                        .HasColumnName("ciudad");

                    b.Property<string>("CodigoPostal")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("Id_postal");

                    b.Property<string>("Id")
                        .HasColumnType("longtext");

                    b.Property<string>("LineaDireccion1")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("linea_direccion1");

                    b.Property<string>("LineaDireccion2")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("linea_direccion2");

                    b.Property<string>("Pais")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("pais");

                    b.Property<string>("Region")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("region");

                    b.Property<string>("Telefono")
                        .HasMaxLength(20)
                        .HasColumnType("varchar(20)")
                        .HasColumnName("telefono");

                    b.HasKey("IdOficina")
                        .HasName("PRIMARY");

                    b.ToTable("oficina", (string)null);
                });

            modelBuilder.Entity("Domain.Entities.Pago", b =>
                {
                    b.Property<int>("IdCliente")
                        .HasColumnType("int")
                        .HasColumnName("Id_cliente");

                    b.Property<string>("Id")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("id_transaccion");

                    b.Property<DateOnly>("FechaPago")
                        .HasColumnType("date")
                        .HasColumnName("fecha_pago");

                    b.Property<string>("FormaPago")
                        .HasMaxLength(40)
                        .HasColumnType("varchar(40)")
                        .HasColumnName("forma_pago");

                    b.Property<decimal>("Total")
                        .HasPrecision(15, 2)
                        .HasColumnType("decimal(15,2)")
                        .HasColumnName("total");

                    b.HasKey("IdCliente", "Id")
                        .HasName("PRIMARY")
                        .HasAnnotation("MySql:IndexPrefixLength", new[] { 0, 0 });

                    b.ToTable("pago", (string)null);
                });

            modelBuilder.Entity("Domain.Entities.Pedido", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int")
                        .HasColumnName("Id_pedido");

                    b.Property<string>("Comentarios")
                        .HasColumnType("text")
                        .HasColumnName("comentarios");

                    b.Property<string>("Estado")
                        .HasMaxLength(15)
                        .HasColumnType("varchar(15)")
                        .HasColumnName("estado");

                    b.Property<DateOnly?>("FechaEntrega")
                        .HasColumnType("date")
                        .HasColumnName("fecha_entrega");

                    b.Property<DateOnly?>("FechaEsperada")
                        .HasColumnType("date")
                        .HasColumnName("fecha_esperada");

                    b.Property<DateOnly?>("FechaPedido")
                        .HasColumnType("date")
                        .HasColumnName("fecha_pedido");

                    b.Property<int>("IdCliente")
                        .HasColumnType("int")
                        .HasColumnName("Id_cliente");

                    b.HasKey("Id")
                        .HasName("PRIMARY");

                    b.HasIndex(new[] { "IdCliente" }, "Id_cliente");

                    b.ToTable("pedido", (string)null);
                });

            modelBuilder.Entity("Domain.Entities.Producto", b =>
                {
                    b.Property<string>("IdProducto")
                        .HasMaxLength(15)
                        .HasColumnType("varchar(15)")
                        .HasColumnName("Id_producto");

                    b.Property<short>("CantidadEnStock")
                        .HasColumnType("smallint")
                        .HasColumnName("cantidad_en_stock");

                    b.Property<string>("Descripcion")
                        .HasColumnType("text")
                        .HasColumnName("descripcion");

                    b.Property<string>("Dimensiones")
                        .HasMaxLength(25)
                        .HasColumnType("varchar(25)")
                        .HasColumnName("dimensiones");

                    b.Property<string>("Gama")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("gama");

                    b.Property<string>("Id")
                        .HasColumnType("longtext");

                    b.Property<string>("Nombre")
                        .HasMaxLength(70)
                        .HasColumnType("varchar(70)")
                        .HasColumnName("nombre");

                    b.Property<decimal>("PrecioProveedor")
                        .HasPrecision(15, 2)
                        .HasColumnType("decimal(15,2)")
                        .HasColumnName("precio_proveedor");

                    b.Property<decimal>("PrecioVenta")
                        .HasPrecision(15, 2)
                        .HasColumnType("decimal(15,2)")
                        .HasColumnName("precio_venta");

                    b.Property<string>("Proveedor")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("proveedor");

                    b.HasKey("IdProducto")
                        .HasName("PRIMARY");

                    b.HasIndex(new[] { "Gama" }, "gama");

                    b.ToTable("producto", (string)null);
                });

            modelBuilder.Entity("Domain.Entities.Cliente", b =>
                {
                    b.HasOne("Domain.Entities.Empleado", "IdEmpleadoRepVentasNavigation")
                        .WithMany("Clientes")
                        .HasForeignKey("IdEmpleadoRepVentas")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("cliente_ibfk_1");

                    b.Navigation("IdEmpleadoRepVentasNavigation");
                });

            modelBuilder.Entity("Domain.Entities.DetallePedido", b =>
                {
                    b.HasOne("Domain.Entities.Pedido", "IdPedidoNavigation")
                        .WithMany("DetallePedidos")
                        .HasForeignKey("IdPedido")
                        .IsRequired()
                        .HasConstraintName("detalle_pedido_ibfk_1");

                    b.HasOne("Domain.Entities.Producto", "IdProductoNavigation")
                        .WithMany("DetallePedidos")
                        .HasForeignKey("IdProducto")
                        .IsRequired()
                        .HasConstraintName("detalle_pedido_ibfk_2");

                    b.Navigation("IdPedidoNavigation");

                    b.Navigation("IdProductoNavigation");
                });

            modelBuilder.Entity("Domain.Entities.Empleado", b =>
                {
                    b.HasOne("Domain.Entities.Empleado", "IdJefeNavigation")
                        .WithMany("InverseIdJefeNavigation")
                        .HasForeignKey("IdJefe")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("empleado_ibfk_2");

                    b.HasOne("Domain.Entities.Oficina", "IdOficinaNavigation")
                        .WithMany("Empleados")
                        .HasForeignKey("IdOficina")
                        .HasConstraintName("empleado_ibfk_1");

                    b.Navigation("IdJefeNavigation");

                    b.Navigation("IdOficinaNavigation");
                });

            modelBuilder.Entity("Domain.Entities.Pago", b =>
                {
                    b.HasOne("Domain.Entities.Cliente", "IdClienteNavigation")
                        .WithMany("Pagos")
                        .HasForeignKey("IdCliente")
                        .IsRequired()
                        .HasConstraintName("pago_ibfk_1");

                    b.Navigation("IdClienteNavigation");
                });

            modelBuilder.Entity("Domain.Entities.Pedido", b =>
                {
                    b.HasOne("Domain.Entities.Cliente", "IdClienteNavigation")
                        .WithMany("Pedidos")
                        .HasForeignKey("IdCliente")
                        .IsRequired()
                        .HasConstraintName("pedido_ibfk_1");

                    b.Navigation("IdClienteNavigation");
                });

            modelBuilder.Entity("Domain.Entities.Producto", b =>
                {
                    b.HasOne("Domain.Entities.GamaProducto", "GamaNavigation")
                        .WithMany("Productos")
                        .HasForeignKey("Gama")
                        .HasConstraintName("producto_ibfk_1");

                    b.Navigation("GamaNavigation");
                });

            modelBuilder.Entity("Domain.Entities.Cliente", b =>
                {
                    b.Navigation("Pagos");

                    b.Navigation("Pedidos");
                });

            modelBuilder.Entity("Domain.Entities.Empleado", b =>
                {
                    b.Navigation("Clientes");

                    b.Navigation("InverseIdJefeNavigation");
                });

            modelBuilder.Entity("Domain.Entities.GamaProducto", b =>
                {
                    b.Navigation("Productos");
                });

            modelBuilder.Entity("Domain.Entities.Oficina", b =>
                {
                    b.Navigation("Empleados");
                });

            modelBuilder.Entity("Domain.Entities.Pedido", b =>
                {
                    b.Navigation("DetallePedidos");
                });

            modelBuilder.Entity("Domain.Entities.Producto", b =>
                {
                    b.Navigation("DetallePedidos");
                });
#pragma warning restore 612, 618
        }
    }
}
